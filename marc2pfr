#!/usr/bin/perl

use strict;
use warnings;

use MARC::Loop qw(marcloop TAG VALREF);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;

my ($norm_oclc, $use_001_number);
my %index = map { $_ => 1 } qw(020a 035a);
my %noindex = ();
my %match = ();
my $first_number = 1;

GetOptions(
    'm|matching=s' => sub { $match{$_[1]} = 1 },
    'n|first-number=i' => \$first_number,
    'o|normalize-oclc-numbers' => \$norm_oclc,
    '0|use-001-number' => \$use_001_number,
) or usage;

if (%match) {
    # XXX Can't we do both?
    %index = ();
}

my %salient = map { substr($_,0,3) => 1 } (keys %index, keys %noindex, keys %match);
$salient{'001'} = 1 if $use_001_number;

my $n = $first_number - 1;
marcloop {
    my ($leader, $fields) = @_;
    $n++;
    my ($bibnum, %seen, @data);
    foreach my $field (@$fields) {
        my $tag = $field->[TAG];
        local $_ = ${ $field->[VALREF] };
        if ($tag eq '020') {
            if (/\x1fa([^\s\x1d-\x1f]{10,})/) {
                my $isbn = $1;
                $isbn =~ tr/-//d;
                $isbn =~ tr/x/X/;
                my $len = length $isbn;
                next if $len != 10 && $len != 13;
                push @data, ['020a', $isbn] if !$seen{'020a'.$isbn}++;
            }
        }
        elsif ($tag eq '035') {
            if (/\x1fa(\(OCoLC\))([^1-9]*)([1-9][0-9]*)/) {
                my $oclc = $norm_oclc ? $1.$3 : $1.$2.$3;
                push @data, ['035a', $oclc] if !$seen{'035a'.$oclc}++;
            }
        }
        elsif ($tag eq '001') {
            $bibnum = $1 if /^0*([1-9][0-9]*)$/;
        }
        else {
            # We're finding matching info
            while (/\x1f(.)([1-9][0-9]*)/g) {
                my $key = $tag . $1;
                next if !$match{$key};
                push @data, [$key, $2] if !$seen{$key.$2};
            }
        }
    }
    if ($use_001_number) {
        fatal "record $n has no bib number in the 001 field" if !$bibnum;
        print $bibnum, "\n";
    }
    else {
        print $n, "\n";
    }
    foreach (@data) {
        my ($k, $v) = @$_;
        if ($index{$k}) {
            print "index $k $v\n" if length $v;
        }
        elsif ($noindex{$k}) {
            print "field $k $v\n" if length $v;
        }
        elsif ($match{$k}) {
            print "match $v\n";
        }
    }
    print "\n";
} \*STDIN, 'error' => sub { die }, 'only' => [keys %salient];
